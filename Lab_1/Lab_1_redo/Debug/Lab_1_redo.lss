
Lab_1_redo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000262  000002f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800108  00800108  000002fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae3  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b0  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000366  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f2  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000110  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e6       	ldi	r30, 0x62	; 98
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a8 30       	cpi	r26, 0x08	; 8
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a8 e0       	ldi	r26, 0x08	; 8
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 30       	cpi	r26, 0x0A	; 10
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  ea:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <mydelay>:
    }
}

void mydelay(int x)
{
	for(int i = 0; i < x; i++)
  f2:	18 16       	cp	r1, r24
  f4:	19 06       	cpc	r1, r25
  f6:	6c f4       	brge	.+26     	; 0x112 <mydelay+0x20>
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	ef e3       	ldi	r30, 0x3F	; 63
  fe:	fc e9       	ldi	r31, 0x9C	; 156
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <mydelay+0xe>
 104:	00 c0       	rjmp	.+0      	; 0x106 <mydelay+0x14>
 106:	00 00       	nop
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	82 17       	cp	r24, r18
 10e:	93 07       	cpc	r25, r19
 110:	a9 f7       	brne	.-22     	; 0xfc <mydelay+0xa>
 112:	08 95       	ret

00000114 <main>:



int main(void)
{
	DDRB = 1<<Led; //set to input
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<button); //enable pull-up
 118:	2f 9a       	sbi	0x05, 7	; 5
	
	PORTB &= ~(1<<Led); //turn led off
 11a:	2d 98       	cbi	0x05, 5	; 5
	
	PCICR |= (1 << PCIE0);
 11c:	e8 e6       	ldi	r30, 0x68	; 104
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	81 60       	ori	r24, 0x01	; 1
 124:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT7);
 126:	eb e6       	ldi	r30, 0x6B	; 107
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	80 83       	st	Z, r24
	sei();
 130:	78 94       	sei
	
	Delay_Time = five_hz;
 132:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <five_hz>
 136:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <five_hz+0x1>
 13a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 13e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	

    while (1) 
    {		
		PORTB &= ~(1<< Led); //Turn led off
 142:	2d 98       	cbi	0x05, 5	; 5
		mydelay(Delay_Time);
 144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 148:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 14c:	0e 94 79 00 	call	0xf2	; 0xf2 <mydelay>
		PORTB |= 1 << Led; //turn led on
 150:	2d 9a       	sbi	0x05, 5	; 5
		mydelay(Delay_Time);
 152:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end>
 156:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x1>
 15a:	0e 94 79 00 	call	0xf2	; 0xf2 <mydelay>
 15e:	f1 cf       	rjmp	.-30     	; 0x142 <main+0x2e>

00000160 <__vector_3>:
	}
	
}

ISR(PCINT0_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
	if(PINB != (PINB & ~(1<<button))) //button goes high
 17c:	23 b1       	in	r18, 0x03	; 3
 17e:	83 b1       	in	r24, 0x03	; 3
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	8f 77       	andi	r24, 0x7F	; 127
 186:	28 17       	cp	r18, r24
 188:	39 07       	cpc	r19, r25
 18a:	99 f1       	breq	.+102    	; 0x1f2 <__vector_3+0x92>
	{	
		switch(Delay_Select)
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Select>
 190:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Select+0x1>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	91 05       	cpc	r25, r1
 198:	71 f0       	breq	.+28     	; 0x1b6 <__vector_3+0x56>
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	91 05       	cpc	r25, r1
 19e:	a1 f0       	breq	.+40     	; 0x1c8 <__vector_3+0x68>
 1a0:	89 2b       	or	r24, r25
 1a2:	d1 f4       	brne	.+52     	; 0x1d8 <__vector_3+0x78>
		{
			case 0:
				Delay_Time = one_hz;
 1a4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <one_hz>
 1a8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <one_hz+0x1>
 1ac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				break;
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <__vector_3+0x78>
			case 1:
				Delay_Time = five_hz;
 1b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <five_hz>
 1ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <five_hz+0x1>
 1be:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1c2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
				break;
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <__vector_3+0x78>
			case 2:
				Delay_Time = ten_hz;
 1c8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ten_hz>
 1cc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ten_hz+0x1>
 1d0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 1d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
		else if(Delay_Select == 2)
		{
			Delay_Time = ten_hz;
			//Delay_Select = 1;
		}*/
		Delay_Select = (Delay_Select + 1) % 3;
 1d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Delay_Select>
 1dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <Delay_Select+0x1>
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 07 01 	call	0x20e	; 0x20e <__divmodhi4>
 1ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <Delay_Select+0x1>
 1ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <Delay_Select>
	}
}
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	3f 91       	pop	r19
 202:	2f 91       	pop	r18
 204:	0f 90       	pop	r0
 206:	0f be       	out	0x3f, r0	; 63
 208:	0f 90       	pop	r0
 20a:	1f 90       	pop	r1
 20c:	18 95       	reti

0000020e <__divmodhi4>:
 20e:	97 fb       	bst	r25, 7
 210:	07 2e       	mov	r0, r23
 212:	16 f4       	brtc	.+4      	; 0x218 <__divmodhi4+0xa>
 214:	00 94       	com	r0
 216:	07 d0       	rcall	.+14     	; 0x226 <__divmodhi4_neg1>
 218:	77 fd       	sbrc	r23, 7
 21a:	09 d0       	rcall	.+18     	; 0x22e <__divmodhi4_neg2>
 21c:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodhi4>
 220:	07 fc       	sbrc	r0, 7
 222:	05 d0       	rcall	.+10     	; 0x22e <__divmodhi4_neg2>
 224:	3e f4       	brtc	.+14     	; 0x234 <__divmodhi4_exit>

00000226 <__divmodhi4_neg1>:
 226:	90 95       	com	r25
 228:	81 95       	neg	r24
 22a:	9f 4f       	sbci	r25, 0xFF	; 255
 22c:	08 95       	ret

0000022e <__divmodhi4_neg2>:
 22e:	70 95       	com	r23
 230:	61 95       	neg	r22
 232:	7f 4f       	sbci	r23, 0xFF	; 255

00000234 <__divmodhi4_exit>:
 234:	08 95       	ret

00000236 <__udivmodhi4>:
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	51 e1       	ldi	r21, 0x11	; 17
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__udivmodhi4_ep>

0000023e <__udivmodhi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	a6 17       	cp	r26, r22
 244:	b7 07       	cpc	r27, r23
 246:	10 f0       	brcs	.+4      	; 0x24c <__udivmodhi4_ep>
 248:	a6 1b       	sub	r26, r22
 24a:	b7 0b       	sbc	r27, r23

0000024c <__udivmodhi4_ep>:
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	5a 95       	dec	r21
 252:	a9 f7       	brne	.-22     	; 0x23e <__udivmodhi4_loop>
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
